(load "./basics.rkt")

(define (bst-min tree)
  (if (empty-tree? tree) #f
      (if (empty-tree? (left-tree tree))
          (root-tree tree)
          (bst-min (left-tree tree))
      )
  )
)
  
(define (bst-max tree)
  (cond ((empty-tree? tree) #f)
        ((empty-tree? (right-tree tree)) (root-tree tree))
        (else (bst-max (right-tree tree)))
  )
)

;binary search
(define (bst-find x tree)
  (cond ((empty-tree? tree) #f)
        ((= x (root-tree tree)) (root-tree tree))
        ((< x (root-tree tree)) (bst-find x (left-tree tree)))
        (else (bst-find x (right-tree tree)))
  )
)

(define (bst-insert x tree)
  (cond ((empty-tree? tree) (leaf x))
        ((< x (root-tree tree)) (make-tree (root-tree tree)
                                           (bst-insert x (left-tree tree))
                                           (right-tree tree)))
        (else (make-tree (root-tree tree)
                         (left-tree tree)
                         (bst-insert x (right-tree tree))))
  )
)
  
(define (bst-remove x tree)
  (cond ((empty-tree? tree) empty-tree)
        ((= x (root-tree tree)) (bst-remove-root tree))
        ((< x (root-tree tree)) (make-tree (root-tree tree)
                                           (bst-remove x (left-tree tree))
                                           (right-tree tree)))
        (else (make-tree (root-tree tree)
                         (left-tree tree)
                         (bst-remove x (right-tree tree))))
  )
)         

(define (bst-remove-root tree)
  (cond ((empty-tree? tree) empty-tree)
        ((empty-tree? (left-tree tree)) (right-tree tree))
        ((empty-tree? (right-tree tree)) (left-tree tree))
        (else (let ((min-elem (bst-min (right-tree tree))))
                   (make-tree min-elem
                              (left-tree tree)
                              (bst-remove min-elem (right-tree tree)))))
  )           
)

(define (tree->list tree)
  (cond
    ((empty-tree? tree) '())
    (else (append (list (root-tree tree))
                  (tree->list (left-tree tree))
                  (tree->list (right-tree tree))))))

(define (sort xs)
  (tree->list (foldr bst-insert empty-tree xs))
)
